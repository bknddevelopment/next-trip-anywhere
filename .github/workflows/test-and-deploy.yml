name: Test and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20.x'

jobs:
  # Unit and Integration Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run typecheck

      - name: Run unit tests with coverage
        run: npm run test:coverage -- --run

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Check coverage thresholds
        run: |
          echo "Checking if coverage meets 70% threshold..."
          npm run test:coverage -- --run --reporter=json --outputFile=coverage-summary.json
          node -e "
            const coverage = require('./coverage-summary.json');
            const total = coverage.total;
            const metrics = ['lines', 'functions', 'branches', 'statements'];
            let failed = false;
            
            metrics.forEach(metric => {
              const pct = total[metric].pct;
              console.log(\`\${metric}: \${pct}%\`);
              if (pct < 70) {
                console.error(\`❌ \${metric} coverage (\${pct}%) is below 70% threshold\`);
                failed = true;
              }
            });
            
            if (failed) {
              process.exit(1);
            } else {
              console.log('✅ All coverage thresholds met!');
            }
          "
        continue-on-error: true

  # E2E Tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_PATH: ''

      - name: Run E2E tests
        run: npx playwright test
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results/
          retention-days: 30

  # Build and Deploy to GitHub Pages
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-unit]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for GitHub Pages
        run: npm run build
        env:
          NEXT_PUBLIC_BASE_PATH: '/Next-Trip-Anywhere'
          NEXT_PUBLIC_FORMSPREE_ID: ${{ secrets.FORMSPREE_ID }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: docs/
          retention-days: 1

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy to GitHub Pages from ${{ github.sha }}'

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for deployment
        run: sleep 60

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=https://${{ github.repository_owner }}.github.io/Next-Trip-Anywhere/ || echo "Lighthouse tests completed"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        continue-on-error: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

# Summary Job
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e, build-and-deploy]
    if: always()
    
    steps:
      - name: Summary
        run: |
          echo "## Test and Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.test-unit.result }}" == "success" ]; then
            echo "✅ Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.test-e2e.result }}" == "success" ]; then
            echo "✅ E2E Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "✅ Build & Deploy: Succeeded" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🚀 **Site deployed to:** https://${{ github.repository_owner }}.github.io/Next-Trip-Anywhere/" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build & Deploy: Failed" >> $GITHUB_STEP_SUMMARY
          fi